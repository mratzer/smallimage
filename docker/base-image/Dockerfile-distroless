# syntax=docker/dockerfile:experimental

ARG JAVA_VERSION
ARG JAVA_IMAGE=eclipse-temurin:${JAVA_VERSION}
ARG BASE_IMAGE=gcr.io/distroless/base-debian11


FROM $JAVA_IMAGE AS custom_jre

ARG JAVA_MODULES

RUN jlink \
        --strip-debug \
        --no-header-files \
        --no-man-pages \
        --compress=2 \
        --output /opt/custom_jre \
        --add-modules $JAVA_MODULES


# Download and extract binaries of libz
# This is needed because the final base image doesn't include it but the JRE needs it
# Alpine is used as base image here because of its package manager (for curl etc.)
FROM alpine AS libz_download

RUN apk --update add --no-cache ca-certificates curl openssl xz tar zstd \
    && ZLIB_URL="https://archive.archlinux.org/packages/z/zlib/zlib-1%3A1.2.13-2-x86_64.pkg.tar.zst" \
    && ZLIB_SHA256=c4f394724b20b84d7304b23bbb58442b6ef53e5cbac89eb51e39d7f0a46abafd \
    && curl -Ls ${ZLIB_URL} -o /tmp/libz.tar.zst \
    && echo "${ZLIB_SHA256}  /tmp/libz.tar.zst" | sha256sum -c - \
    && mkdir /tmp/libz \
    && tar --use-compress-program=unzstd -xf /tmp/libz.tar.zst -C /tmp/libz

FROM ${BASE_IMAGE}

ENV PATH=/opt/jre/bin

COPY --from=libz_download /tmp/libz/usr/lib/libz.so* /usr/lib
COPY --from=custom_jre /opt/custom_jre /opt/jre
